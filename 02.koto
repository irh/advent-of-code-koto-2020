# https://adventofcode.com/2020/day/2

import io.print, test.assert_eq


parse_password = |line|
  policy = {}

  # e.g.
  # 1-3 a: abcde

  split_hyphen = line.split("-")
  policy.required_min = split_hyphen.next().to_number()

  split_spaces = split_hyphen.next().split(" ")
  policy.required_max = split_spaces.next().to_number()

  required_letter = split_spaces.next()
  policy.required_letter = required_letter.split(":").next()

  password = split_spaces.next()

  policy, password


parse_input = |input|
  input
    .lines()
    .each |line| parse_password line
    .to_tuple()


count_valid_passwords_part_one = |input|
  input
    .keep |(policy, password)|
      letter_count = password
        .keep |letter| letter == policy.required_letter
        .count()
      policy.required_min <= letter_count <= policy.required_max
    .count()


count_valid_passwords_part_two = |input|
  input
    .keep |(policy, password)|
      first, second = policy.required_min - 1, policy.required_max - 1
      matches = password
        .enumerate()
        .keep |(i, letter)|
          (i == first or i == second) and letter == policy.required_letter
        .count()
      matches == 1
    .count()


@main = ||
  input = io.extend_path koto.script_dir, "input", "02"
    >> io.read_to_string
    >> parse_input
  print "Part one: ${count_valid_passwords_part_one input}" # 638
  print "Part two: ${count_valid_passwords_part_two input}" # 699


@tests =
  @pre_test: |self|
    self.input = parse_input "\
1-3 a: abcde
1-3 b: cdefg
2-9 c: ccccccccc
"

  @test parse_password: ||
    policy, password = parse_password "1-3 a: abcde"
    assert_eq policy.required_letter, "a"
    assert_eq policy.required_min, 1
    assert_eq policy.required_max, 3
    assert_eq password, "abcde"

  @test part_one: |self|
    assert_eq (count_valid_passwords_part_one self.input), 2

  @test part_two: |self|
    assert_eq (count_valid_passwords_part_two self.input), 1
