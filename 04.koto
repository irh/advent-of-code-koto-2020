# https://adventofcode.com/2020/day/4

import io, koto, string.print
from test import assert, assert_eq

expected_fields = "byr", "iyr", "eyr", "hgt", "hcl", "ecl", "pid"
eye_colours = "amb", "blu", "brn", "gry", "grn", "hzl", "oth"


parse_passports = |passports|
  result = []
  passport = {}
  for line in passports.lines()
    if line.is_empty()
      result.push passport
      passport = {}
    for field in line.split(" ")
      if field.is_empty()
        continue
      key, value = field.split(":").to_tuple()
      if (expected_fields.contains key) or key == "cid"
        passport.insert key value
      else
        assert false
  result.push passport
  result


digits = "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
is_digit = |c| digits.contains c


passport_is_valid_part_one = |passport|
  expected_fields.all |field|
    passport.contains_key field


passport_is_valid_part_two = |passport|
  for field in expected_fields
    value = passport.get field
    if value == () then return false
    match field
      "byr" then if not 1920 <= value.to_number() <= 2002 then return false
      "iyr" then if not 2010 <= value.to_number() <= 2020 then return false
      "eyr" then if not 2020 <= value.to_number() <= 2030 then return false
      "hgt"
        end_of_number = value.chars().position |c| not is_digit c
        if end_of_number == () then return false
        n = (value.slice 0 end_of_number).to_number()
        unit = value.slice end_of_number
        match unit
          "cm" then if not 150 <= n <= 193 then return false
          "in" then if not 59 <= n <= 76 then return false
          _ then return false
      "hcl"
        if (value.slice 0 1) != "#" then return false
        color = value.slice 1
        if color.size() != 6 then return false
        if not color.chars().all(|c| "0123456789abcdef".contains c) then return false
      "ecl" then if not (eye_colours.contains value) then return false
      "pid"
        if value.size() != 9 then return false
        if not value.chars().all(|digit| is_digit digit) then return false
  true


export main = ||
  passports = parse_passports (io.read_to_string koto.script_dir + "./input/04")

  part_one = passports
    .keep |passport| passport_is_valid_part_one passport
    .count()
  print "Part one: {}" part_one # 233

  part_two = passports
    .keep |passport| passport_is_valid_part_two passport
    .count()
  print "Part two: {}" part_two # 111


export tests =
  pre_test: |self|
    self.passports = parse_passports "\
ecl:gry pid:860033327 eyr:2020 hcl:#fffffd
byr:1937 iyr:2017 cid:147 hgt:183cm

iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884
hcl:#cfa07d byr:1929

hcl:#ae17e1 iyr:2013
eyr:2024
ecl:brn pid:760753108 byr:1931
hgt:179cm

hcl:#cfa07d eyr:2025 pid:166559648
iyr:2011 ecl:brn hgt:59in
"

  test_parse_passports: |self|
    assert_eq self.passports.size() 4
    assert_eq self.passports[0].ecl "gry"
    assert_eq self.passports[1].byr "1929"
    assert_eq self.passports[2].hgt "179cm"
    assert_eq self.passports[3].eyr "2025"

  test_part_one: |self|
    assert (passport_is_valid_part_one self.passports[0])
    assert not (passport_is_valid_part_one self.passports[1])
    assert (passport_is_valid_part_one self.passports[2])
    assert not (passport_is_valid_part_one self.passports[3])

  test_part_two_valid: |self|
    passports = parse_passports "\
pid:087499704 hgt:74in ecl:grn iyr:2012 eyr:2030 byr:1980
hcl:#623a2f

eyr:2029 ecl:blu cid:129 byr:1989
iyr:2014 pid:896056539 hcl:#a97842 hgt:165cm

hcl:#888785
hgt:164cm byr:2001 iyr:2015 cid:88
pid:545766238 ecl:hzl
eyr:2022

iyr:2010 hgt:158cm hcl:#b6652a ecl:blu byr:1944 eyr:2021 pid:093154719
"
    for passport in passports
      if not passport_is_valid_part_two passport
        debug passport
        assert false

  test_part_two_invalid: |self|
    passports = parse_passports "\
eyr:1972 cid:100
hcl:#18171d ecl:amb hgt:170 pid:186cm iyr:2018 byr:1926

iyr:2019
hcl:#602927 eyr:1967 hgt:170cm
ecl:grn pid:012533040 byr:1946

hcl:dab227 iyr:2012
ecl:brn hgt:182cm pid:021572410 eyr:2020 byr:1992 cid:277

hgt:59cm ecl:zzz
eyr:2038 hcl:74454a iyr:2023
pid:3556412378 byr:2007
"
    assert passports.all(|passport| not passport_is_valid_part_two passport)
