# https://adventofcode.com/2020/day/20

import io.print
from test import assert, assert_eq

edge_id = |edge|
  # An edge is a series of 1s and 0s, a numerical ID can then be produced by packing the
  # edge as a binary number.
  bits = edge.size()
  result = edge
    .enumerate()
    .fold 0, |result, (i, bit)|
      result.or bit.shift_left bits - i - 1
  result

make_tile = |tile_id, grid|
  tile_id: tile_id
  grid: grid

  edges: |self|
    edge_ids = |edge|
      # TODO it would be nice to have iterator.reverse() here
      edge = edge.to_list()
      yield edge_id edge
      edge.reverse()
      yield edge_id edge

    ids = edge_ids self.grid.first()
    yield ids.next()
    yield ids.next()

    ids = edge_ids self.grid.last()
    yield ids.next()
    yield ids.next()

    ids = edge_ids self.grid.each |row| row.first()
    yield ids.next()
    yield ids.next()

    ids = edge_ids self.grid.each |row| row.last()
    yield ids.next()
    yield ids.next()

  @display: |self|
    row_to_string = |row|
      row
        .each |cell| if cell == 1 then "#" else "."
        .to_string()
    result = "\nTile ${self.tile_id}:\n"
    for row in self.grid
      result += "${row_to_string row}\n"
    result

make_edge_map = |tiles|
  result = {}
  for tile in tiles
    for edge_id in tile.edges()
      result.update edge_id, [], |tile_ids|
        tile_ids.push tile.tile_id
        tile_ids
  result

corner_ids = |edge_map|
  unique_edge_count = {}
  for edge_id, tile_ids in edge_map
    match tile_ids
      [unique] then unique_edge_count.update unique, 0, |count| count += 1
  unique_edge_count
    .keep |(tile_id, count)| count == 4 # 2 unique edges, * 2 for flipping
    .each |(tile_id, _)| tile_id

part_one = |tiles|
  edge_map = make_edge_map tiles
  (corner_ids edge_map).product()

parse_input = |input|
  tiles = []
  lines = input.lines()

  loop
    line = lines.next()

    # Tile xxxx:
    tile_id = line[5..9].to_number()

    # 10 rows like: .#..####.#
    grid = lines
      .take 10
      .each |line|
        line
          .chars()
          .each |c| if c == '#' then 1 else 0
          .to_tuple()
      .to_tuple()

    tiles.push make_tile tile_id, grid

    match lines.next()
      () then break
      "" then continue
      other then throw "Expected empty line, got '{}'".format other

  tiles

export main = ||
  tiles = parse_input io.read_to_string io.extend_path koto.script_dir, "input", "20"
  print "Part one: ${part_one tiles}" # 51214443014783

export @tests =
  @test part_one: |self|
    path = io.extend_path koto.script_dir, "input", "20-example"
    tiles = parse_input io.read_to_string path
    assert_eq tiles.size(), 9
    assert_eq (part_one tiles), 20899048083289
