# https://adventofcode.com/2020/day/1

parse_expenses = |input|
  input
    .lines()
    .each |line| line.to_number()
    .to_tuple()

product_of_two_expenses_that_sum_to_2020 = |expenses|
  for x in 0..expenses.size()
    expense_x = expenses[x]
    for y in x + 1..expenses.size()
      expense_y = expenses[y]
      if expense_x + expense_y == 2020
        return expense_x * expense_y

product_of_three_expenses_that_sum_to_2020 = |expenses|
  for x in 0..expenses.size()
    expense_x = expenses[x]
    for y in x + 1..expenses.size()
      expense_y = expenses[y]
      for z in y + 1..expenses.size()
        expense_z = expenses[z]
        if expense_x + expense_y + expense_z == 2020
          return expense_x * expense_y * expense_z

@main = ||
  input = io.extend_path koto.script_dir, "input", "01"
    >> io.read_to_string
    >> parse_expenses

  part_one = product_of_two_expenses_that_sum_to_2020 input
  print "Part one: $part_one" # 974304

  part_two = product_of_three_expenses_that_sum_to_2020 input
  print "Part two: $part_two" # 236430480

@tests =
  @pre_test: ||
    self.input = "\
1721
979
366
299
675
1456"

  @test part_one: ||
    expenses = parse_expenses self.input
    result = product_of_two_expenses_that_sum_to_2020 expenses
    assert_eq result, 514579

  @test part_two: ||
    expenses = parse_expenses self.input
    result = product_of_three_expenses_that_sum_to_2020 expenses
    assert_eq result, 241861950
