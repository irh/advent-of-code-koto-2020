# https://adventofcode.com/2020/day/11

import enum.make_enum, io, koto, list, os, string.print, test.assert_eq, thread

cell = make_enum "floor" "empty" "occupied"

directions =
  num2 -1 -1, num2 0 -1, num2 1 -1,
  num2 -1  0,            num2 1  0,
  num2 -1  1, num2 0  1, num2 1  1,

make_floor_grid = |input|
  grid, row_count, row_size = input
    .lines()
    .fold ([], 0, 0) |(grid, row_count, _), line|
      row = line
        .chars()
        .each |c|
          match c
            "." then cell.floor
            "L" then cell.empty
            "#" then cell.occupied
        .to_list()
      (grid + row, row_count + 1, row.size())

  return
    grid: grid
    temp_grid: grid.copy()

    row_size: row_size
    row_count: row_count

    fill_seats: |self, filling_logic|
      worker_count = os.physical_cpu_count()
      batch_size = row_count / worker_count
      workers = (0..worker_count)
        .each |worker_index|
          thread.create || filling_logic worker_index batch_size
        .to_tuple()

      state_changed = workers.fold false |result, worker|
        worker.join() or result

      list.swap self.grid self.temp_grid
      state_changed

    fill_seats_part_one: |self|
      self.fill_seats |worker_index, batch_size|
        grid, temp_grid = self.grid, self.temp_grid
        row_size, row_count = self.row_size, self.row_count
        state_changed = false

        batch_start = batch_size * worker_index
        batch = batch_start..(batch_start + batch_size).min row_count
        for y in batch
          y_index = y * row_size
          for x in 0..row_size
            index = y_index + x
            state = grid[index]
            if state == cell.floor then continue

            occupied_count = 0
            for direction in directions
              dx = x + direction[0]
              if not (0 <= dx < row_size)
                continue
              dy = y + direction[1]
              if not (0 <= dy < row_count)
                continue
              if grid[dy * row_size + dx] == cell.occupied
                occupied_count += 1

            temp_grid[index] = match state
              cell.empty if occupied_count == 0
                state_changed = true
                cell.occupied
              cell.occupied if occupied_count >= 4
                state_changed = true
                cell.empty
              else state
        state_changed

    fill_seats_part_two: |self|
      self.fill_seats |worker_index, batch_size|
        grid, temp_grid = self.grid, self.temp_grid
        row_size, row_count = self.row_size, self.row_count
        state_changed = false

        batch_start = batch_size * worker_index
        batch = batch_start..(batch_start + batch_size).min row_count
        for y in batch
          y_index = y * row_size
          for x in 0..row_size
            index = y_index + x
            state = grid[index]
            if state == cell.floor then continue

            occupied_count = 0
            for direction in directions
              dx, dy = x, y
              loop
                dx += direction[0]
                if not 0 <= dx < row_size
                  break
                dy += direction[1]
                if not 0 <= dy < row_count
                  break
                match grid[dy * row_size + dx]
                  cell.empty
                    break
                  cell.occupied
                    occupied_count += 1
                    break

            temp_grid[index] = match state
              cell.empty if occupied_count == 0
                state_changed = true
                cell.occupied
              cell.occupied if occupied_count >= 5
                state_changed = true
                cell.empty
              else state
        state_changed


    fill_seats_until_stable_part_one: |self|
      result = 0
      while self.fill_seats_part_one()
        result += 1
      result

    fill_seats_until_stable_part_two: |self|
      result = 0
      while self.fill_seats_part_two()
        result += 1
      result

    occupied_seats_count: |self|
      self.grid
        .keep |position| position == cell.occupied
        .count()

    to_string: |self|
      result = ""
      for y in 0..self.row_count
        for x in 0..self.row_size
          result += match self.grid[y * self.row_size + x]
            cell.floor then "."
            cell.empty then "L"
            cell.occupied then "#"
        result += "\n"

export main = ||
  grid = make_floor_grid (io.read_to_string koto.script_dir + "./input/11")

  part_one = grid.deep_copy()
  print "Part one"
  print "- seats stabilised in {} steps" part_one.fill_seats_until_stable_part_one()
  print "- occupied seats: {}" part_one.occupied_seats_count() # 2261

  part_two = grid
  print "Part two"
  print "- seats stabilised in {} steps" part_two.fill_seats_until_stable_part_two()
  print "- occupied seats: {}" part_two.occupied_seats_count() # 2039

export tests =
  pre_test: |self|
    self.grid = make_floor_grid "\
L.LL.LL.LL
LLLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLLL
L.LLLLLL.L
L.LLLLL.LL
"

  test_part_one: |self|
    assert_eq self.grid.fill_seats_until_stable_part_one() 5
    assert_eq self.grid.occupied_seats_count() 37

  test_part_two: |self|
    assert_eq self.grid.fill_seats_until_stable_part_two() 6
    assert_eq self.grid.occupied_seats_count() 26
